import { addTemplate, createResolver, defineNuxtModule, findPath, useLogger } from '@nuxt/kit'
import { UTILS } from '../../cli/src/utils/templates'

// TODO: add test to make sure all registry is being parse correctly
// Module options TypeScript interface definition
export interface ModuleOptions {
  /**
   * Prefix for all the imported component
   */
  prefix?: string
  /**
   * Directory that the component lives in.
   * @default "./components/ui"
   */
  componentDir?: string
}

export default defineNuxtModule<ModuleOptions>({
  meta: {
    name: 'shadcn',
    configKey: 'shadcn',
  },
  defaults: {
    prefix: '',
    componentDir: './components/ui',
  },
  async setup({ prefix, componentDir }, nuxt) {
    const COMPONENT_DIR_PATH = componentDir!
    const ROOT_DIR_PATH = nuxt.options.rootDir
    const UTILS_ALIAS = '@/lib/utils' // Use the same path from the cli for backward compatibility
    const { resolve } = createResolver(ROOT_DIR_PATH)
    const logger = useLogger('shadcn-nuxt')

    // `lib/utils`
    const utilsTemplate = addTemplate({
      filename: 'shadcn-nuxt/utils.ts',
      getContents: () => UTILS,
      write: true,
    })
    nuxt.options.alias = { [UTILS_ALIAS]: utilsTemplate.dst, ...nuxt.options.alias } // We add our alias to the top to avoid conflicts with nuxt built in `@` alias

    // Recommend to remove the root `lib/utils` if exists
    const isRootUtilsExists = await findPath('./lib/utils.ts', { cwd: ROOT_DIR_PATH })
    if (isRootUtilsExists)
      logger.warn('[shadcn-nuxt] `lib/utils.ts` is auto generated by the module and can be safely removed.')

    // Components Auto Imports
    const componentsPath = resolve(COMPONENT_DIR_PATH)
    nuxt.hook('components:dirs', (dirs) => {
      dirs.unshift({
        path: componentsPath,
        extensions: ['.vue'], // Scan `.vue` only and skip `.ts` files as we use them inside components file only
        prefix,
      })
    })
  },
})
